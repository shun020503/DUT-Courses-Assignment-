a.
#include <bits/stdc++.h>
using namespace std;

double polynomialValue(vector<double>& coefficients, double x) {
    double result = 0.0;
    int n = coefficients.size() - 1; 
    for (int i = n; i >= 0; i--) {
        result = result * x + coefficients[i];
    }
    return result;
}

int main() {
    vector<double> coefficients = {1.0, 2.0, 3.0}; 
    double x = 2.0; 
    double result = polynomialValue(coefficients, x);
    cout << "P(" << x << ") = " << result << endl;
    return 0;
}
b. The complexity is O(n)
c. 
#include <bits/stdc++.h>
using namespace std;

double polynomialValueHorner(vector<double>& coefficients, double x) {
    double result = 0.0;
    for (int i = coefficients.size() - 1; i >= 0; i--) {
        result = coefficients[i] + x * result;
    }

    return result;
}

int main() {
    vector<double> coefficients = {1.0, 2.0, 3.0}; 
    double x = 2.0; 
    double result = polynomialValueHorner(coefficients, x);
    cout << "P(" << x << ") = " << result << endl;
    return 0;
}
d. 
Both functions have the same computational complexity of O(n)